<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<T3locallang>
	<meta type="array">
		<description>Contents of devlog csh</description>
		<type>CSH</type>
		<csh_table>_MOD_tools_txdevlogM1</csh_table>
		<fileId>EXT:devlog/locallang_csh_txdevlog.xml</fileId>
		<labelContext type="array">
		</labelContext>
	</meta>
	<data type="array">
		<languageKey index="default" type="array">
			<label index=".alttitle">Developer Log</label>
			<label index=".description">The Developer Log extension (devlog) provides logging functionality. It hooks into t3lib_div::devlog() to catch devlog events. A BE module gives an overview of the logged events. For more information read the extension manual, which can be found on typo3.org</label>
			<label index=".syntax">If you want to make use of the devlog in your extension, simply call the following helper function with the appropriate parameters:
				t3lib_div::devlog($msg, $extKey, $severity = 0, $dataVar = FALSE);

				The parameters are:
				$msg: Message in english. (string)
				$extKey: Extension key (from which extension you are calling the log) (string)
				$severity: Severity: 0 is info, 1 is notice, 2 is warning, 3 is fatal error, -1 is "OK" message (integer)
				$dataVar: Additional data you want to pass to the logger. (array)
			</label>
			<label index="mod_severity.alttitle">Severity</label>
			<label index="mod_severity.description">The severity gives you an impression about how serious the logged event is.</label>
			<label index="mod_severity.details">
				There are five levels of severity, to higher the number, the more severe is the event:
				Ok: Events with severity Ok have a debugging purpose. Debug message provide plenty of informations and are used only while development.
				Info: Purely informational messages, but less detailed than severity Ok/Debug. Info signals that things are alright, so usually no action is neccessary.
				Notice: Normal, but significant condition. Notice is meant to give information in the first place, but it signals to pay attention, because things might not be running perfect.
				Warning: Warning signals a condition that did not prevent completion of a job, but may require some action to avoid malfunctions in future.
				Error: Error refers to a condition where some fatal malfunction occurred and action is definitely needed.
			</label>
			<label index="mod_severity.image">EXT:devlog/res/csh_severities.png</label>
			<label index="mod_extkey.alttitle">Extension</label>
			<label index="mod_extkey.description">The component which triggered the event</label>
			<label index="mod_extkey.details">
				The value could be an extension key but also the core itself or a certain part of it. It depends on the logging implementation of the component which has triggered the event.
				More details about the file or the part which triggered the event can be found in the column "Called from".
				One hint about excluded keys: There's an option in the extension manager to excluded some keys from being logged. Notice that if there were events before you excluded a key, those events however are still shown here in the list.
			</label>
			<label index="mod_page.alttitle">Page</label>
			<label index="mod_page.description">The title of the page which has been called when the event happened. It's also the page where the record is stored.</label>
			<label index="mod_page.details">Events can also be found as page records in the web->list module.</label>
			<label index="mod_cruser.alttitle">User</label>
			<label index="mod_cruser.description">The BE user which was logged in the backend and triggered the event.</label>
			<label index="mod_cruser.details">This field is useful, if multiple BE users are triggering events at the same time, on the same pages or by the same components.</label>
			<label index="mod_extra_data.alttitle">Extra data</label>
			<label index="mod_extra_data.description">Extra data can provide an array with detailed information about the circumstances of the event.</label>
			<label index="mod_extra_data.details">
				There are almost no boundaries for this field, except that it is an array. In many cases, this field can contain the processed data, when the event has been triggered. For example, you could get the full stack debug trace when there is an SQL error. Another showcase would be to deliver be the relevant TS setup parts or any other configuration array.
				The value depends on the logging implementation of the component which has triggered the event.
			</label>
		</languageKey>
	</data>
</T3locallang>
